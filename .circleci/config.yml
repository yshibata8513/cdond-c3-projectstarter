version: 2.1
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-yasaimasimasi85
            aws s3 rm s3://udapeople-frontend-yasaimasimasi85 --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-yasaimasimasi85

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token: db8ae497-ebf6-41e3-bc58-e0d32cbbe674" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS == "true" ));  
            then
            # cd ~/project/backend
            # npm install
            #  Add revert code here. You can find this in the Getting Started section.
            npm run migrations:revert
            fi
            
jobs:
  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules


  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build


  # install-backend-dependencies:
  #   executor: node
  #   steps:
  #     - checkout
  #     - run:
  #         name: npm install
  #         working_directory: ./backend
  #         command: ls -la && npm install
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - backend/node_modules


  # install-frontend-dependencies:
  #   executor: node
  #   steps:
  #     - checkout
  #     - run:
  #         name: npm install
  #         working_directory: ./frontend
  #         command: ls -la && npm install
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - frontend/node_modules


  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [frontend-build]
  #     - run:
  #         name: install npm
  #         command: |
  #           cd frontend
  #           ls -la && npm install
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm run build
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - frontend/node_modules
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [backend-build]
  #     - run:
  #         name: install npm
  #         command: |
  #           cd backend
  #           ls -la && npm install
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm run build
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - backend/node_modules
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: analyze frontend
          working_directory: ./frontend
          command: npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: analyze backend
          working_directory: ./backend
          command: npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: .
          command: |
           aws cloudformation deploy \
              --template-file .circleci/files/backend.yml  \
              --stack-name udapeople-backend-yasaimasimasi85 \
              --parameter-overrides ID=yasaimasimasi85 \
              --tags project=udapeople-backend-yasaimasimasi85

      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-yasaimasimasi85" \
              --output text)

            curl -H "Content-Type: text/plain" -H "token: fe872203-d6b5-4e9a-91d8-a3f107aacdbe" --request PUT --data "BACKEND_IP" https://api.memstash.io/values/BACKEND_IP
         
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: .
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml  \
              --stack-name udapeople-frontend-yasaimasimasi8513 \
              --parameter-overrides ID=yasaimasimasi8513 \
              --tags project=udapeople-frontend-yasaimasimasi8513
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-yasaimasimasi85" \
              --output text >> inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure     
      # - destroy-environment:
      #     when: on_fail 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:e9:9f:46:07:79:02:49:aa:47:cf:fc:b1:5d:ea:08"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure   
      # - destroy-environment:
      #     when: on_fail    

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: npm install
  #         working_directory: ./backend
  #         command: |
  #           sudo npm install
  #           npm audit fix --audit-level=critical --force
  #           npm run build
  #     - run:
  #         name: Run migrations
  #         working_directory: ./backend
  #         command: |
  #           npm run migrations > migration_status
  #     - run:
  #         name: Send migration results to memstash
  #         working_directory: ./backend
  #         command: |
  #           if grep -q "has been executed successfully" migration_status
  #           then
  #             echo "migration success"
  #             curl -H "Content-Type: text/plain" -H "token: db8ae497-ebf6-41e3-bc58-e0d32cbbe674" --request PUT --data "true" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
  #           else
  #             echo "migration failure"
  #             curl -H "Content-Type: text/plain" -H "token: db8ae497-ebf6-41e3-bc58-e0d32cbbe674" --request PUT --data "false" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
  #           fi
  #    # Here's where you will add some code to rollback on failure   
  #     # - destroy-environment:
  #     #     when: on_fail    

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: db8ae497-ebf6-41e3-bc58-e0d32cbbe674" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: db8ae497-ebf6-41e3-bc58-e0d32cbbe674" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=yasaimasimasi85"


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(curl -H "token: fe872203-d6b5-4e9a-91d8-a3f107aacdbe" --request GET https://api.memstash.io/values/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build

      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            # your code here
            aws s3 cp ./dist "s3://udapeople-yasaimasimasi85" --recursive

      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure      
      # - destroy-environment:
      #     when: on_fail
      # - revert-migrations:
      #     when: on_fail
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:e9:9f:46:07:79:02:49:aa:47:cf:fc:b1:5d:ea:08"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     when: on_fail
      # - revert-migrations:
      #     when: on_fail

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl -H "token: fe872203-d6b5-4e9a-91d8-a3f107aacdbe" --request GET https://api.memstash.io/values/BACKEND_IP)
            export BACKEND_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_URL}"
      - run:
          name: Backend smoke test.
          command: |
            curl "BACKEND_URL"
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-yasaimasimasi85.s3-website-us-west-2.amazonaws.com"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     when: on_fail
      # - revert-migrations:
      #     when: on_fail

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: fe872203-d6b5-4e9a-91d8-a3f107aacdbe" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # - revert-migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail
      # # Here's where you will add some code to rollback on failure  

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldWorkflowID=$(curl -H "token: fe872203-d6b5-4e9a-91d8-a3f107aacdbe" --request GET https://api.memstash.io/values/WorkflowID)
            # CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            # if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            # then
            #   echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"

            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            # else
            #   echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            # fi
          # environment:
          #   TERM: xterm-256color
            

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies

      - build-frontend:
          requires:
            - install-frontend-dependencies
          
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]